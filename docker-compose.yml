services:
  redis:
    image: redis:7-alpine
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  web:
    build: .
    volumes:
      - .:/app
      - ./staticfiles:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8001:8001"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - .env
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - backend

  celery:
    build: .
    command:  celery -A config worker --pool=gevent -l info
    volumes:
      - .:/app
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - .env
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
    depends_on:
      redis:
        condition: service_healthy
      web:
        condition: service_started
    networks:
      - backend

  celery-beat:
    build: .
    command: >
      sh -c "
        echo 'Waiting for web service to complete migrations...' &&
        sleep 15 &&
        python3 manage.py migrate --noinput &&
        python3 manage.py migrate django_celery_beat --noinput &&
        echo 'Starting celery beat...' &&
        celery -A config beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
      "
    volumes:
      - .:/app
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - .env
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
    depends_on:
      redis:
        condition: service_healthy
      web:
        condition: service_started
    networks:
      - backend

volumes:
  media_volume:

networks:
  backend: